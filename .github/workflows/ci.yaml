name: Deploy to App

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  DOCKER_REPOSITORY: losmino13
  SERVICE: mbition
  ENVIRONMENT: dev

permissions:
  id-token: write
  contents: write
  pull-requests: read

jobs:
  version_bump:
    if: github.event.pull_request.merged == true
    name: Check and Bump  version
    runs-on: ubuntu-latest
    outputs:
      outputver: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.2

      - name: Config GitHub user
        run: |
          git config user.name version-bot
          git config user.email ci@gmail.com

      - name: Bump major version
        if: startsWith(github.head_ref, 'breaking/')
        run: npm version major

      - name: Bump minor version
        if: startsWith(github.head_ref, 'feature/')
        run: npm version minor

      - name: Bump minor version
        if: startsWith(github.head_ref, 'main')
        run: echo "direct push to main"

      - name: Bump patch version
        if: |
          startsWith(github.head_ref, 'fix/') ||
          startsWith(github.head_ref, 'chore/')
        run: npm version patch

      - id: ver
        run: echo "version=$(node --eval="process.stdout.write(require('./package.json').version)")" >> $GITHUB_OUTPUT

      - name: Push change
        run: git push

  build_deploy:
    name: Build & Deploy
    needs: version_bump
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, tag, and push image to DockerHub
        id: build-image
        env:
          IMAGE_TAG: v${{ needs.version_bump.outputs.outputver }}
        run: |
          # Build a docker container and push it to dockerhub
          docker build -t $DOCKER_REPOSITORY/$SERVICE:$IMAGE_TAG .
          docker tag $DOCKER_REPOSITORY/$SERVICE:$IMAGE_TAG $DOCKER_REPOSITORY/$SERVICE:latest
          docker push $DOCKER_REPOSITORY/$SERVICE:$IMAGE_TAG
          docker push $DOCKER_REPOSITORY/$SERVICE:latest
          echo "image=$DOCKER_REPOSITORY/$SERVICE:$IMAGE_TAG" >> $GITHUB_OUTPUT

  generate_csv:
    name: Generate CSV file and archive it
    runs-on: ubuntu-latest
    steps:
      - name: run jq script
        run: |
          pwd
          ls -ltr
          chmod +x ./scripts/make_csv.sh
          ./scripts/make_csv.sh
      - name: Upload csv results to arifacts
        uses: actions/upload-artifact@v3
        with:
          name: DevOps report csv
          path: output_no_quotes.csv
          retention-days: 7

  trigger_scan:
    needs: build_deploy
    name: Trigger Image Scan
    uses: ./.github/workflows/scan-image.yaml
    secrets: inherit
